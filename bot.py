import os
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Configuration
OWNER_ID = 7588665244  # Your Telegram User ID
BROADCAST_MESSAGE = "üì¢ Default broadcast message"  # Editable via /setbroadcast
conversation_history = {}
user_ids = set()  # Tracks all users for broadcasting

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_ids.add(user.id)
    welcome_msg = f"""
üéâ *Welcome {user.first_name}!* üéâ  

‚ú® *I'm your personal AI assistant* ‚ú®  

ü§ñ How can I assist you today?  

üî• *Features*:  
‚úÖ 100% Free & Unlimited  
‚úÖ Instant Responses  
‚úÖ Memory Across Chats  

üìù *Quick Commands*:  
üîÑ /new - Fresh start  
‚ÑπÔ∏è /help - Show this menu  

‚ö° *Try asking*:  
"Explain like I'm 5 üßí"  
"Give me 3 ideas üí°"  

üõ†Ô∏è Support: @Smartautomationsupport_bot  
üöÄ Powered by: @smartautomations  
"""
    update.message.reply_text(welcome_msg, parse_mode="Markdown")

def help_command(update: Update, context: CallbackContext) -> None:
    help_msg = """
üÜò *@smartautomations_bot Help* üÜò  
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  
üí¨ *How to chat*:  
Just type messages like:  
‚Ä¢ "Explain quantum physics ‚öõÔ∏è"  
‚Ä¢ "Write a haiku about cats üê±"  

‚öôÔ∏è *Commands*:  
üîÑ /new - Reset conversation  
‚ÑπÔ∏è /help - This message  

üìè *Limits*:  
4000 chars/message  
(we auto-split üìú)  

üîã *Status*: Operational ‚úÖ  

üí° *Pro Tip*:  
Use emojis for better responses! üòâ  
"""
    update.message.reply_text(help_msg, parse_mode="Markdown")

def new_chat(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    conversation_history[chat_id] = []
    update.message.reply_text("""
üîÑ *Memory Cleared!* üßπ  

Ask me anything new! üí≠  

*Try these*:  
‚Ä¢ "Tell me a fun fact üé≤"  
‚Ä¢ "Help me brainstorm üí°"
""", parse_mode="Markdown")

def set_broadcast(update: Update, context: CallbackContext) -> None:
    if update.effective_user.id != OWNER_ID:
        update.message.reply_text("üö´ *Owner only!*", parse_mode="Markdown")
        return

    global BROADCAST_MESSAGE
    BROADCAST_MESSAGE = " ".join(context.args) or "üì¢ New broadcast"
    update.message.reply_text(f"‚úÖ *Broadcast message set to:*\n{BROADCAST_MESSAGE}", parse_mode="Markdown")

def broadcast(update: Update, context: CallbackContext) -> None:
    if update.effective_user.id != OWNER_ID:
        update.message.reply_text("üö´ *Owner only!*", parse_mode="Markdown")
        return

    if not user_ids:
        update.message.reply_text("‚ùå No users to broadcast to!")
        return

    progress_msg = update.message.reply_text(f"üì° Broadcasting to {len(user_ids)} users...")
    success = 0

    for user_id in user_ids:
        try:
            context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ *Announcement*\n\n{BROADCAST_MESSAGE}",
                parse_mode="Markdown"
            )
            success += 1
            if success % 10 == 0:
                context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=progress_msg.message_id,
                    text=f"üì° Broadcasting... ({success}/{len(user_ids)})"
                )
        except Exception as e:
            print(f"Failed to send to {user_id}: {e}")

    context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=progress_msg.message_id,
        text=f"‚úÖ Broadcast complete!\nSent to: {success}/{len(user_ids)} users"
    )

def get_ai_response(prompt: str, chat_id: int) -> str:
    try:
        messages = conversation_history.get(chat_id, [])
        messages.append({"role": "user", "content": prompt})
        
        response = requests.post(
            "https://free.churchless.tech/v1/chat/completions",
            json={"messages": messages},
            timeout=10
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"API Error: {e}")
        return None

def handle_message(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    user_message = update.message.text
    
    if not user_message.strip():
        update.message.reply_text("""
üìõ *Oops! Empty Message* üìõ

@smartautomations_bot needs text to respond!

Try:
‚Ä¢ A question ‚ùì
‚Ä¢ An idea üí°
""", parse_mode="Markdown")
        return
    
    if update.effective_user.id not in user_ids:
        user_ids.add(update.effective_user.id)
    
    thinking_msg = update.message.reply_text("""
‚ú® *Smart AI is thinking* ü§î...  
Please wait...
""", parse_mode="Markdown")
    
    context.bot.send_chat_action(
        chat_id=chat_id,
        action="typing"
    )
    
    ai_response = get_ai_response(user_message, chat_id)
    
    if not ai_response:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=thinking_msg.message_id,
            text="""
‚ö†Ô∏è *Temporary Issue* ‚ö†Ô∏è

@smartautomations_bot is working hard but:

üîß AI service is overloaded
‚è≥ Try again in 1-2 minutes
üîÑ Or /new to reset

üíå Contact @Smartautomationsupport_bot if needed

*We value your patience* üôè
""",
            parse_mode="Markdown"
        )
        return
    
    if len(ai_response) > 4000:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=thinking_msg.message_id,
            text="üìú *Big Answer Alert!* üìú\nSplitting response into parts...",
            parse_mode="Markdown"
        )
        for i in range(0, len(ai_response), 4000):
            context.bot.send_message(
                chat_id=chat_id,
                text=ai_response[i:i+4000]
            )
    else:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=thinking_msg.message_id,
            text=ai_response
        )

def main() -> None:
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise RuntimeError("‚ùå TELEGRAM_TOKEN not set!")
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("new", new_chat))
    dispatcher.add_handler(CommandHandler("broadcast", broadcast))
    dispatcher.add_handler(CommandHandler("setbroadcast", set_broadcast))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    PORT = int(os.getenv("PORT", 8000))
    APP_NAME = os.getenv("KOYEB_APP_NAME", "your-app-name")
    
    updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=f"https://{APP_NAME}.koyeb.app/{TOKEN}"
    )
    print(f"üöÄ Bot deployed: https://{APP_NAME}.koyeb.app")
    updater.idle()

if __name__ == "__main__":
    main()
